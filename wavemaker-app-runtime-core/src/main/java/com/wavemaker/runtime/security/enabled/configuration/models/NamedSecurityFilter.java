/*******************************************************************************
 * Copyright (C) 2022-2023 WaveMaker, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.08.16 at 06:55:11 PM IST 
//

package com.wavemaker.runtime.security.enabled.configuration.models;

import java.util.function.Supplier;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

import org.springframework.security.cas.web.CasAuthenticationFilter;
import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;
import org.springframework.security.web.access.ExceptionTranslationFilter;
import org.springframework.security.web.access.channel.ChannelProcessingFilter;
import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;
import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.logout.LogoutFilter;
import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;
import org.springframework.security.web.authentication.preauth.x509.X509AuthenticationFilter;
import org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter;
import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;
import org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.security.web.authentication.www.DigestAuthenticationFilter;
import org.springframework.security.web.context.SecurityContextPersistenceFilter;
import org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter;
import org.springframework.security.web.csrf.CsrfFilter;
import org.springframework.security.web.header.HeaderWriterFilter;
import org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;
import org.springframework.security.web.savedrequest.RequestCacheAwareFilter;
import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter;
import org.springframework.security.web.session.ConcurrentSessionFilter;
import org.springframework.security.web.session.SessionManagementFilter;
import org.springframework.session.web.http.SessionRepositoryFilter;
import org.springframework.web.filter.CorsFilter;

/**
 * <p>Java class for named-security-filter.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="named-security-filter">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="FIRST"/>
 *     &lt;enumeration value="CHANNEL_FILTER"/>
 *     &lt;enumeration value="SECURITY_CONTEXT_FILTER"/>
 *     &lt;enumeration value="CONCURRENT_SESSION_FILTER"/>
 *     &lt;enumeration value="WEB_ASYNC_MANAGER_FILTER"/>
 *     &lt;enumeration value="HEADERS_FILTER"/>
 *     &lt;enumeration value="CORS_FILTER"/>
 *     &lt;enumeration value="CSRF_FILTER"/>
 *     &lt;enumeration value="LOGOUT_FILTER"/>
 *     &lt;enumeration value="X509_FILTER"/>
 *     &lt;enumeration value="PRE_AUTH_FILTER"/>
 *     &lt;enumeration value="CAS_FILTER"/>
 *     &lt;enumeration value="FORM_LOGIN_FILTER"/>
 *     &lt;enumeration value="OPENID_FILTER"/>
 *     &lt;enumeration value="LOGIN_PAGE_FILTER"/>
 *     &lt;enumeration value="DIGEST_AUTH_FILTER"/>
 *     &lt;enumeration value="BASIC_AUTH_FILTER"/>
 *     &lt;enumeration value="REQUEST_CACHE_FILTER"/>
 *     &lt;enumeration value="SERVLET_API_SUPPORT_FILTER"/>
 *     &lt;enumeration value="JAAS_API_SUPPORT_FILTER"/>
 *     &lt;enumeration value="REMEMBER_ME_FILTER"/>
 *     &lt;enumeration value="ANONYMOUS_FILTER"/>
 *     &lt;enumeration value="SESSION_MANAGEMENT_FILTER"/>
 *     &lt;enumeration value="EXCEPTION_TRANSLATION_FILTER"/>
 *     &lt;enumeration value="FILTER_SECURITY_INTERCEPTOR"/>
 *     &lt;enumeration value="SWITCH_USER_FILTER"/>
 *     &lt;enumeration value="LAST"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 */
@XmlType(name = "named-security-filter")
@XmlEnum
public enum NamedSecurityFilter {

    FIRST("FIRST", () -> SessionRepositoryFilter.class),
    CHANNEL_FILTER("CHANNEL_FILTER", () -> ChannelProcessingFilter.class),
    SECURITY_CONTEXT_FILTER("SECURITY_CONTEXT_FILTER", () -> SecurityContextPersistenceFilter.class),
    CONCURRENT_SESSION_FILTER("CONCURRENT_SESSION_FILTER", () -> ConcurrentSessionFilter.class),
    WEB_ASYNC_MANAGER_FILTER("WEB_ASYNC_MANAGER_FILTER", () -> WebAsyncManagerIntegrationFilter.class),
    HEADERS_FILTER("HEADERS_FILTER", () -> HeaderWriterFilter.class),
    CORS_FILTER("CORS_FILTER", () -> CorsFilter.class),
    CSRF_FILTER("CSRF_FILTER", () -> CsrfFilter.class),
    LOGOUT_FILTER("LOGOUT_FILTER", () -> LogoutFilter.class),
    @XmlEnumValue("X509_FILTER")
    X_509_FILTER("X509_FILTER", () -> X509AuthenticationFilter.class),
    PRE_AUTH_FILTER("PRE_AUTH_FILTER", () -> AbstractPreAuthenticatedProcessingFilter.class),
    CAS_FILTER("CAS_FILTER", () -> CasAuthenticationFilter.class),
    FORM_LOGIN_FILTER("FORM_LOGIN_FILTER", () -> UsernamePasswordAuthenticationFilter.class),
    OPENID_FILTER("OPENID_FILTER", () -> OAuth2LoginAuthenticationFilter.class),
    LOGIN_PAGE_FILTER("LOGIN_PAGE_FILTER", () -> DefaultLoginPageGeneratingFilter.class),
    DIGEST_AUTH_FILTER("DIGEST_AUTH_FILTER", () -> DigestAuthenticationFilter.class),
    BASIC_AUTH_FILTER("BASIC_AUTH_FILTER", () -> BasicAuthenticationFilter.class),
    REQUEST_CACHE_FILTER("REQUEST_CACHE_FILTER", () -> RequestCacheAwareFilter.class),
    SERVLET_API_SUPPORT_FILTER("SERVLET_API_SUPPORT_FILTER", () -> SecurityContextHolderAwareRequestFilter.class),
    JAAS_API_SUPPORT_FILTER("JAAS_API_SUPPORT_FILTER", () -> JaasApiIntegrationFilter.class),
    REMEMBER_ME_FILTER("REMEMBER_ME_FILTER", () -> RememberMeAuthenticationFilter.class),
    ANONYMOUS_FILTER("ANONYMOUS_FILTER", () -> AnonymousAuthenticationFilter.class),
    SESSION_MANAGEMENT_FILTER("SESSION_MANAGEMENT_FILTER", () -> SessionManagementFilter.class),
    EXCEPTION_TRANSLATION_FILTER("EXCEPTION_TRANSLATION_FILTER", () -> ExceptionTranslationFilter.class),
    FILTER_SECURITY_INTERCEPTOR("FILTER_SECURITY_INTERCEPTOR", () -> FilterSecurityInterceptor.class),
    SWITCH_USER_FILTER("SWITCH_USER_FILTER", () -> SwitchUserFilter.class),
    LAST("LAST", () -> SwitchUserFilter.class);
    private final String key;

    private final Supplier<Class<?>> klassSupplier;

    NamedSecurityFilter(String key, Supplier<Class<?>> klassSupplier) {
        this.key = key;
        this.klassSupplier = klassSupplier;
    }

    public String getKey() {
        return key;
    }

    public Supplier<Class<?>> getKlassSupplier() {
        return klassSupplier;
    }

    public static Class<?> getClass(String key) {
        for (NamedSecurityFilter namedSecurityFilter : NamedSecurityFilter.values()) {
            if (namedSecurityFilter.getKey().equals(key)) {
                return namedSecurityFilter.getKlassSupplier().get();
            }
        }
        throw new IllegalArgumentException(key);
    }

    public static NamedSecurityFilter getValue(String key) {
        for (NamedSecurityFilter namedSecurityFilter : NamedSecurityFilter.values()) {
            if (namedSecurityFilter.getKey().equals(key)) {
                return namedSecurityFilter;
            }
        }
        throw new IllegalArgumentException(key);
    }

}

